#if ! defined ( ID_H )
#define ID_H
using namespace std;

//--------------------------------------------------- Interfaces utilis¨¦s
#include <string>
#include "Exp.h"
//------------------------------------------------------------- Constantes

//------------------------------------------------------------------ Types

//------------------------------------------------------------------------

//
//
//------------------------------------------------------------------------

 class Id : public Exp
{
//----------------------------------------------------------------- PUBLIC

public:
//----------------------------------------------------- M¨¦thodes publiques

	virtual double evaluation(const std::map<Id,Exp*> & variables);

	string getNomId();

//------------------------------------------------- Surcharge d'op¨¦rateurs
	 bool operator<(const Id & second) const;

//-------------------------------------------- Constructeurs - destructeur
	Id ( const Id & Id );

	Id ( );

	Id (string);

    virtual ~Id ( );

//------------------------------------------------------------------ PRIVE

protected:
//----------------------------------------------------- M¨¦thodes prot¨¦g¨¦es

private:
//------------------------------------------------------- M¨¦thodes priv¨¦es

protected:
//----------------------------------------------------- Attributs prot¨¦g¨¦s
    string nomId;
private:
//------------------------------------------------------- Attributs priv¨¦s

//---------------------------------------------------------- Classes amies

//-------------------------------------------------------- Classes priv¨¦es

//----------------------------------------------------------- Types priv¨¦s

};

//----------------------------------------- Types dépendants de <${file_base}>

#endif // ID_H

